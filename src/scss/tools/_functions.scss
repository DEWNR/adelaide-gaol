/* ==========================================================================
   #Functions
   ========================================================================== */

/* Contents
    - Colors
    - Strip units
    - Convert pixels to rems
    - Get values from nested maps
   ========================================================================== */

/* Colors
   ========================================================================== */
/// Shade
@function shade($color, $percentage) {
  @return mix($color, #000, $percentage);
}

/// Tint
@function tint($color, $percentage) {
  @return mix($color, #fff, $percentage);
}

/// Color
/// get color from our list of definied colors
@function color($key) {
  @return map-get($global-colors, $key);
}


/* Strip units
   ========================================================================== */
@function strip-unit($value) {
  @if (type-of($value) == number) {
    @return $value / ($value * 0 + 1);
  }

  @else {
    @warn "Value must be a number eg. 12em, 24px etc.";
  }
}


/* Convert pixel value to rems
   ========================================================================== */
@function rem($value) {
  @if (type-of($value) == number and unit($value) == 'px') {
    @return ($value / $global-font-size) * 1rem;
  }

  @else {
    @error "`rem()` expected a pixel value. Actual value was: `#{$value}`";
  }
}


/* Get value from nested maps
   ========================================================================== */
@function map-deep-get($map, $keys...) {
  @each $key in $keys {
    $map: map-get($map, $key);
  }

  @return $map;
}
